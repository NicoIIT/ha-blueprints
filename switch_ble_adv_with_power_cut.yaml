blueprint:
  name: Single Wall Switch cutting power supply of a BLE ADV Device
  description: |
    Use a single Wall Switch to cut the power supply of a BLE ADV device.

    Several behaviors needs to be implemented as side scenes (see parameters) depending on your wishes, see [examples](https://github.com/NicoIIT/ha-ble-adv/wiki/Wall-Switches#examples-for-switch-cutting-power-supply-of-the-device).

    Side Notes:
    * All entities in "Fixed Scenes" and "Default Scenes" MUST be owned by the Device which power supply is cut by the Wall Switch.
    * On HA Restart or Scenes Reload, the "Restore ON Scene" is lost, thus the need for "Default Scenes" if you have not defined "Fixed Scenes"

    The implementation proposed is done in 4 automations with 4 different triggers:

        1. When the "Wall Switch" is switched OFF:
            The entities ON are saved in the dynamic "Restore ON Scene" IF at least one of them is ON
            All device entities are switched OFF

        2. When the "Wall Switch" is switched ON:
            if there is NO entities ON: this is a Switch ON using the Wall Switch:
                Wait for "Delay After ON" for the Device to be available
                the "Fixed Scenes" are turned ON
                the entities part of the dynamic "Restore ON Scene" and not part of "Fixed Scenes" are turned ON
                the other entities (Not in "Restore ON Scene" nor in "Fixed Scene") are turned OFF (Forced, thanks to 'Force Send' Option)
                if no device entity is ON after that, the "Default Scenes" are turned ON
                if no device entity is ON after that, all the light entities of the device are turned ON

        3. When one of the device entity is switched OFF:
            if all device entities are OFF and the "Wall Switch" is ON:
                The "Wall Switch" is turned OFF
            if at least one entity is still ON, save the ON entities in the dynamic "Restore ON Scene"

        4. When one of the device entity is switched ON:
            The entities ON are saved in the dynamic "Restore ON Scene"
            if the "Wall Switch" is OFF, this is a Switch ON by entity switch ON:
                The "Wall Switch" is turned ON
                Wait for "Delay After ON" for the Device to be available
                The ON entities are RE Switched ON (Should work thanks to 'Force Send' Option)
                All other entities are Switched OFF (Forced, thanks to 'Force Send' Option)


  domain: automation
  input:
    button_switch:
      name: Wall Switch
      description: The Wall Switch controlling the device
      selector:
        entity:
          domain:
          - switch
          - input_boolean
    device_id:
      name: Device
      description: The BLE ADV device controlled by the ON / OFF switch
      selector:
        device:
          entity:
            integration: ble_adv
    delay_on:
      name: Delay After ON
      description: The delay to wait for the Device to be ready to receive commands after re-instating its power supply
      default: 00:00:01
      selector:
        duration:
          enable_millisecond: true
    fixed_scenes:
      name: Fixed Scenes
      description: The scenes to be turned ON on switch ON. All entities not part of one of the "Fixed Scenes" are restored from their last state.
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - scene
    default_scenes:
      name: Default Scenes
      description: The scenes to be turned ON on switch ON if NO device entity is ON after switch ON (BEST EFFORT in case last state lost, after HA restart for example).
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - scene

mode: queued

variables:
  button_switch: !input button_switch
  device_id: !input device_id
  fixed_scenes: !input fixed_scenes
  default_scenes: !input default_scenes

  dev_all_entities: "{{ device_entities(device_id) | list }}"
  dev_fans: "{{ dev_all_entities | select('match', 'fan.') | list }}"
  dev_lights: "{{ dev_all_entities | select('match', 'light.') | list }}"
  dev_entities: "{{ dev_lights + dev_fans }}"
  dev_entities_on: "{{ dev_entities | select('is_state', 'on') | list}}"

  fixed_scenes_entities: "{{ fixed_scenes | map('state_attr', 'entity_id') | sum(start=[]) }}"
  restored_fans: "{{ dev_fans | reject('in', fixed_scenes_entities) | list }}"
  restored_lights: "{{ dev_lights | reject('in', fixed_scenes_entities) | list }}"

  auto_id: "{{ this.entity_id.replace('.', '_') }}"
  restore_on_id: "restore_on_{{ auto_id }}"
  scene_restore_on_id: "scene.{{ restore_on_id }}"

  snapshot_on_entities: "{{ state_attr(scene_restore_on_id, 'entity_id') if states[scene_restore_on_id] != None else [] }}"

triggers:
  - id: "switch_off"
    trigger: state
    entity_id: !input button_switch
    to: "off"
  - id: "switch_on"
    trigger: state
    entity_id: !input button_switch
    from: "off"
    to: "on"
  - id: "one_ent_off"
    trigger: device
    domain: 'ble_adv'
    device_id: !input device_id
    type: any_entity_state
    to: "off"
  - id: "one_ent_on"
    trigger: device
    domain: 'ble_adv'
    device_id: !input device_id
    type: any_entity_state
    to: "on"

conditions: []
actions:
- choose:
  - conditions:
    - condition: trigger
      id: 'switch_off'
    sequence:
    - if:
      - condition: template
        value_template: "{{ dev_entities_on | length > 0}}"
      then: # At least one dev entity ON: save snapshot of ON entities and switch OFF
      - action: scene.create # or replace if exists
        data:
          scene_id: "{{ restore_on_id }}"
          snapshot_entities: "{{ dev_entities_on }}"
      - repeat: # Switch all entities OFF
          for_each: "{{ dev_entities_on }}"
          sequence:
          - action: homeassistant.turn_off
            target:
              entity_id: "{{ repeat.item }}"

  - conditions:
    - condition: trigger
      id: 'switch_on'
    sequence:
    - if:
      - condition: template
        value_template: "{{ dev_entities_on | length == 0 }}"
      then: # Turn ON by Switch Turn ON
        - delay: !input delay_on # Wait for the device to be available
        - repeat: # Apply the Fixed Scenes
            for_each: "{{ fixed_scenes }}"
            sequence:
            - action: scene.turn_on
              data:
                entity_id: "{{ repeat.item }}"
        # Handle the remaining lights
        - repeat: # Restore the lights ON part of Snapshot
            for_each: "{{ restored_lights | select('in', snapshot_on_entities) | list }}"
            sequence:
            - action: homeassistant.turn_on
              target:
                entity_id: "{{ repeat.item }}"
        - repeat: # Switch all other light entities OFF
            for_each: "{{ restored_lights | reject('in', snapshot_on_entities) | list }}"
            sequence:
            - action: homeassistant.turn_off
              target:
                entity_id: "{{ repeat.item }}"
        # Handle the remaining fans
        - repeat: # Restore the fans ON part of Snapshot
            for_each: "{{ restored_fans | select('in', snapshot_on_entities) | list }}"
            sequence:
            - action: homeassistant.turn_on
              target:
                entity_id: "{{ repeat.item }}"
        - repeat: # Switch all other fan entities OFF
            for_each: "{{ restored_fans | reject('in', snapshot_on_entities) | list }}"
            sequence:
            - action: homeassistant.turn_off
              target:
                entity_id: "{{ repeat.item }}"
        - if: # Best Effort: restore default_scenes if still no entity is ON after that
          - condition: template
            value_template: "{{ dev_entities | select('is_state', 'on') | list | length == 0 }}"
          then:
          - repeat:
              for_each: "{{ default_scenes }}"
              sequence:
              - action: scene.turn_on
                data:
                  entity_id: "{{ repeat.item }}"
        - if: # Last Effort: turn all light ON if still no entity is ON after that
          - condition: template
            value_template: "{{ dev_entities | select('is_state', 'on') | list | length == 0 }}"
          then:
          - repeat:
              for_each: "{{ dev_lights }}"
              sequence:
              - action: homeassistant.turn_on
                data:
                  entity_id: "{{ repeat.item }}"

  - conditions:
    - condition: trigger
      id: 'one_ent_off'
    sequence:
    - if:
      - condition: template
        value_template: "{{ (dev_entities | reject('is_state', 'off') | list | length == 0) and is_state(button_switch, 'on') }}"
      then:
      - action: homeassistant.turn_off
        target:
          entity_id: "{{ button_switch }}"
    - if:
      - condition: template
        value_template: "{{ (dev_entities_on | length > 0) and not is_state(button_switch, 'off') }}"
      then: # One entity switched OFF, but button NOT OFF and at least one entity still ON: refresh snapshot
      - action: scene.create # or replace if exists
        data:
          scene_id: "{{ restore_on_id }}"
          snapshot_entities: "{{ dev_entities_on }}"

  - conditions:
    - condition: trigger
      id: 'one_ent_on'
    sequence:
    - action: scene.create # or replace if exists
      data:
        scene_id: "{{ restore_on_id }}"
        snapshot_entities: "{{ dev_entities_on }}"
    - if:
      - condition: template
        value_template: "{{ is_state(button_switch, 'off') }}"
      then: # Switch ON by entity Switch ON
      - action: homeassistant.turn_on
        target:
          entity_id: "{{ button_switch }}"
      - delay: !input delay_on # Wait for the device to be available
      - repeat: # RE Switch initially ON entity ON a new time (should work thanks to 'Force Send' Option)
          for_each: "{{ dev_entities_on }}"
          sequence:
          - action: homeassistant.turn_on
            target:
              entity_id: "{{ repeat.item }}"
      - repeat: # Switch all other light entities OFF
          for_each: "{{ dev_lights | reject('in', dev_entities_on) | list }}"
          sequence:
          - action: homeassistant.turn_off
            target:
              entity_id: "{{ repeat.item }}"
      - repeat: # Switch all other fan entities OFF
          for_each: "{{ dev_fans | reject('in', dev_entities_on) | list }}"
          sequence:
          - action: homeassistant.turn_off
            target:
              entity_id: "{{ repeat.item }}"

