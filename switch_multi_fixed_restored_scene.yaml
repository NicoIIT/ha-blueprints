blueprint:
  name: Single Wall Switch controlling multiple independant entities with fixed and dynamique scene
  description: |
    Use a single Wall Switch to Control several independant entities that could also potentially be controlled by other ways (Physical remotes, Wifi, Bluetooth, ...).

    If using a smart ON/OFF switch, this one cannot physically control a device as it will be used as a Toggle.

    The implementation proposed is the following:

        When the "Wall Switch Button" is pressed:
            if at least one entity defined in one of the "Fixed Scenes" or in the "Restored Entities" is ON:
                => We consider the action is a Global switch OFF
                The entities state part of "Restored Entities" are saved in a dynamic Scene
                all entities are switched OFF
            else:
                => We consider theaction is a Global switch ON
                if "Use Fixed Scenes as Fallback" and the dynamic Restored Scene does not exists (lost...):
                  the "Fixed Scenes" are turned ON
                elif not "Use Fixed Scenes as Fallback":
                  the "Fixed Scenes" are turned ON
                  the dynamic Restored Scene is turned ON (and then deleted)

    It is mandatory to define at least one Fixed Scene so that there is always something to be restored, either:
    * Always on Switch ON if "Use Fixed Scenes as Fallback" is false
    * Only when there is no internal dynamic Scene to restore (first use or lost at HA restart for example) when "Use Fixed Scenes as Fallback" is true

  domain: automation
  input:
    button_switch:
      name: Wall Switch Button
      description: The (input_button / button / input_switch / switch) Wall Switch
      selector:
        entity:
          domain:
          - input_switch
          - input_boolean
          - switch
          - input_button
          - button
    fixed_scenes:
      name: Fixed Scenes
      description: The scenes to be turned ON on switch ON. The entities defined in the "Fixed Scenes" must NOT appear in the "Restored Entities".
      selector:
        entity:
          multiple: true
          domain:
          - scene
    restored_entities:
      name: Restored Entities
      description: The entities that are switched ON on switch ON ONLY if they where ON on last switch OFF. All entities defined here must NOT be part of the "Fixed Scene".
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - light
          - fan
          - switch
    fixed_scenes_as_fallback:
      name: Use Fixed Scenes as Fallback
      description: Use the fixed scenes only as a fallback solution if there is no internal dynamic scene to restore (first use after HA restart)
      default: false
      selector:
        boolean:

variables:
  fixed_scenes: !input fixed_scenes
  restored_entities: !input restored_entities
  fixed_scenes_as_fallback: !input fixed_scenes_as_fallback

  scenes_entities: "{{ fixed_scenes | map('state_attr', 'entity_id') | sum(start=[]) }}"
  scenes_entities_on: "{{ scenes_entities | select('is_state', 'on') | list }}"
  restored_entities_on: "{{ restored_entities | select('is_state', 'on') | list }}"
  restore_id: "restore_{{ this.entity_id.replace('.', '_') }}"
  scene_restore_id: "scene.{{ restore_id }}"
  has_scene_restore: "{{ states[scene_restore_id] != None }}"

triggers:
  - trigger: state
    entity_id: !input button_switch
    not_from: ['unavailable', 'unknown']
    not_to: ['unavailable', 'unknown']

conditions: []
actions:
  - if:
    - condition: template
      value_template: "{{ (scenes_entities_on + restored_entities_on) | length > 0 }}"
    then: # At least one entity is ON: Save Restored Entities and Switch OFF
    - if:
      - condition: template
        value_template: "{{ restored_entities | length > 0 }}"
      then: # At least one "Restore Entities" defined: save snapshot
      - action: scene.create # or replace if exists
        data:
          scene_id: "{{ restore_id }}"
          snapshot_entities: "{{ restored_entities }}"
    - repeat:
        for_each: '{{ scenes_entities_on + restored_entities_on }}'
        sequence:
        - action: homeassistant.turn_off
          target:
            entity_id: "{{ repeat.item }}"
    else: # All Entities OFF: turn_on the Fixed and Restored scenes
    - if:
      - condition: template
        value_template: "{{ not fixed_scenes_as_fallback or (not has_scene_restore and fixed_scenes_as_fallback) }}"
      then:
      - repeat:
          for_each: "{{ fixed_scenes }}"
          sequence:
          - action: scene.turn_on
            data:
              entity_id: "{{ repeat.item }}"
    - if:
      - condition: template
        value_template: "{{ has_scene_restore }}"
      then:
      - action: scene.turn_on
        data:
          entity_id: "{{ scene_restore_id }}"
      - action: scene.delete
        data:
          entity_id: "{{ scene_restore_id }}"


mode: single