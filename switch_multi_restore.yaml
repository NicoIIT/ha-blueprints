blueprint:
  name: Single Wall Switch controlling multiple independant entities
  description: |
    Use a single Wall Switch to Control several independant entities that could also potentially be controlled by other ways (Physical remotes, Wifi, Bluetooth, ...).

    If using a smart ON/OFF switch, this one cannot physically control a device as it will be used as a Toggle.

    There is no magic here: if you use a single button with only a 'single_press' action, or a ON/OFF switch, to control several entities there will be limitations.

    The implementation proposed is the following:

        When the "Wall Switch Button" is pressed:
            if at least one entity in "Always ON Entities", "Restored Entities" or "Non Restored Entities" is ON:
                => We consider the action is a Global switch OFF
                all entities are switched OFF
                the list of IDs of the "Restored Entities" that are ON at that moment is saved in a Text Input Helper
            else:
                => We consider theaction is a Global switch ON
                all "Always ON Entities" are switched ON
                all "Restored Entities" are switched ON if they are in the saved list

    If the entities are switched OFF by another way than the switch button (Remote, Wifi, ...), the list of entities to be restored is NOT Updated.
  domain: automation
  input:
    button_switch:
      name: Wall Switch Button
      description: The binary sensor / input_button / button Wall Switch
      selector:
        entity:
          domain:
          - binary_sensor
          - input_button
          - button
    on_entities:
      name: Always ON Entities
      description: The entities that are always switched ON on switch ON
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - light
          - fan
          - switch
    restored_entities:
      name: Restored entities
      description: The entities that are switched ON on switch ON ONLY if they where ON on last switch OFF
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - light
          - fan
          - switch
    non_restored_entities:
      name: Non Restored entities
      description: The entities that are NEVER switched ON on switch ON.
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - light
          - fan
          - switch
    saved_state:
      name: Saved entity states
      description: |
        An automation cannot remember values in between runs, so it is needed to put the ID of the entities to be switched back on
        in an input_text dedicated to this automation.
      selector:
        entity:
          domain:
          - input_text


variables:
  # Input variables
  on_entities: !input on_entities
  restored_entities: !input restored_entities
  non_restored_entities: !input non_restored_entities
  saved_state: !input saved_state
  # Computed variables
  all_entities: "{{ on_entities + restored_entities + non_restored_entities }}"
  all_entities_on: "{{ all_entities | select('is_state', 'on') | list }}"
  restored_entities_on: "{{ restored_entities | select('is_state', 'on') | list }}"
  to_be_restored_entities: "{{ states(saved_state).split('/') | reject('equalto','') | list }}"

triggers:
  - trigger: state
    entity_id: !input button_switch
    from: "off"
    to: "on"

conditions: []
actions:
  - if:
    - condition: template
      value_template: "{{ all_entities_on | length > 0}}"
    then: # At least one entity is ON: Save state and switch OFF
    - action: input_text.set_value
      target:
        entity_id: !input saved_state
      data:
        value: "{{ restored_entities_on | join('/') }}"
    - repeat:
        for_each: "{{ all_entities_on }}"
        sequence:
        - action: homeassistant.turn_off
          target:
            entity_id: "{{ repeat.item }}"
    else: # All Entities OFF: Switch ON the needed entities
    - repeat:
        for_each: "{{ on_entities + to_be_restored_entities }}"
        sequence:
        - action: homeassistant.turn_on
          target:
            entity_id: "{{ repeat.item }}"
    - action: input_text.set_value
      target:
        entity_id: !input saved_state
      data:
        value: ""

mode: single
